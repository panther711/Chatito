// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test action defiend after alias 1`] = `
Array [
  Object {
    "entities": Array [],
    "intent": "arg",
    "text": "asdf",
  },
]
`;

exports[`test action referencing action works as text 1`] = `
Array [
  Object {
    "entities": Array [],
    "intent": "asdf",
    "text": "test %[arg]",
  },
]
`;

exports[`test action referencing undefined alias 1`] = `[Error: Undefined alias alias]`;

exports[`test action referencing undefined argument 1`] = `[Error: Undefined argument arg]`;

exports[`test action with two arguments 1`] = `
Array [
  Object {
    "entities": Array [
      Object {
        "end": 23,
        "entity": "lights",
        "start": 17,
        "value": "lights",
      },
      Object {
        "end": 27,
        "entity": "switch",
        "start": 24,
        "value": "off",
      },
    ],
    "intent": "lightChange",
    "text": "Hey Bot turn the lights off",
  },
  Object {
    "entities": Array [
      Object {
        "end": 23,
        "entity": "lights",
        "start": 17,
        "value": "lights",
      },
      Object {
        "end": 26,
        "entity": "switch",
        "start": 24,
        "value": "on",
      },
    ],
    "intent": "lightChange",
    "text": "Hey Bot turn the lights on",
  },
  Object {
    "entities": Array [
      Object {
        "end": 22,
        "entity": "lights",
        "start": 17,
        "value": "luces",
      },
      Object {
        "end": 26,
        "entity": "switch",
        "start": 23,
        "value": "off",
      },
    ],
    "intent": "lightChange",
    "text": "Hey Bot turn the luces off",
  },
  Object {
    "entities": Array [
      Object {
        "end": 22,
        "entity": "lights",
        "start": 17,
        "value": "luces",
      },
      Object {
        "end": 25,
        "entity": "switch",
        "start": 23,
        "value": "on",
      },
    ],
    "intent": "lightChange",
    "text": "Hey Bot turn the luces on",
  },
]
`;

exports[`test action without correct identation error 1`] = `
"{
  \\"message\\": \\"Expected \\\\\\"%\\\\\\", \\\\\\"@\\\\\\", \\\\\\"\\\\\\\\n\\\\\\", \\\\\\"~\\\\\\", correct indentation, or end of input but \\\\\\" \\\\\\" found.\\",
  \\"expected\\": [
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"\\\\n\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"other\\",
      \\"description\\": \\"correct indentation\\"
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"\\\\n\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"%\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"\\\\n\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"@\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"\\\\n\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"~\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"end\\"
    }
  ],
  \\"found\\": \\" \\",
  \\"location\\": {
    \\"start\\": {
      \\"offset\\": 17,
      \\"line\\": 3,
      \\"column\\": 1
    },
    \\"end\\": {
      \\"offset\\": 18,
      \\"line\\": 3,
      \\"column\\": 2
    }
  },
  \\"name\\": \\"SyntaxError\\"
}"
`;

exports[`test action without sentences error 1`] = `
"{
  \\"message\\": \\"Expected \\\\\\"\\\\\\\\n\\\\\\" or correct indentation but end of input found.\\",
  \\"expected\\": [
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"\\\\n\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"other\\",
      \\"description\\": \\"correct indentation\\"
    }
  ],
  \\"found\\": null,
  \\"location\\": {
    \\"start\\": {
      \\"offset\\": 8,
      \\"line\\": 2,
      \\"column\\": 1
    },
    \\"end\\": {
      \\"offset\\": 8,
      \\"line\\": 2,
      \\"column\\": 1
    }
  },
  \\"name\\": \\"SyntaxError\\"
}"
`;

exports[`test argument that defines only one alias inside each line 1`] = `
"[
  {
    \\"text\\": \\"lights on\\",
    \\"intent\\": \\"lightChange\\",
    \\"entities\\": [
      {
        \\"start\\": 7,
        \\"end\\": 9,
        \\"value\\": \\"on\\",
        \\"entity\\": \\"switch\\"
      }
    ]
  },
  {
    \\"text\\": \\"lights active\\",
    \\"intent\\": \\"lightChange\\",
    \\"entities\\": [
      {
        \\"start\\": 7,
        \\"end\\": 13,
        \\"value\\": \\"on\\",
        \\"entity\\": \\"switch\\"
      }
    ]
  },
  {
    \\"text\\": \\"lights off\\",
    \\"intent\\": \\"lightChange\\",
    \\"entities\\": [
      {
        \\"start\\": 7,
        \\"end\\": 10,
        \\"value\\": \\"off\\",
        \\"entity\\": \\"switch\\"
      }
    ]
  },
  {
    \\"text\\": \\"lights inactive\\",
    \\"intent\\": \\"lightChange\\",
    \\"entities\\": [
      {
        \\"start\\": 7,
        \\"end\\": 15,
        \\"value\\": \\"off\\",
        \\"entity\\": \\"switch\\"
      }
    ]
  }
]"
`;

exports[`test empty parser error 1`] = `
"{
  \\"message\\": \\"Expected \\\\\\"%\\\\\\", \\\\\\"@\\\\\\", \\\\\\"\\\\\\\\n\\\\\\", or \\\\\\"~\\\\\\" but end of input found.\\",
  \\"expected\\": [
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"\\\\n\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"%\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"\\\\n\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"@\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"\\\\n\\",
      \\"ignoreCase\\": false
    },
    {
      \\"type\\": \\"literal\\",
      \\"text\\": \\"~\\",
      \\"ignoreCase\\": false
    }
  ],
  \\"found\\": null,
  \\"location\\": {
    \\"start\\": {
      \\"offset\\": 0,
      \\"line\\": 1,
      \\"column\\": 1
    },
    \\"end\\": {
      \\"offset\\": 0,
      \\"line\\": 1,
      \\"column\\": 1
    }
  },
  \\"name\\": \\"SyntaxError\\"
}"
`;

exports[`test no actions error 1`] = `[Error: No actions found]`;

exports[`test pegjs parser output 1`] = `
"[
  {
    \\"type\\": \\"ActionDefinition\\",
    \\"key\\": \\"lightChange\\",
    \\"location\\": {
      \\"start\\": {
        \\"offset\\": 1,
        \\"line\\": 2,
        \\"column\\": 1
      },
      \\"end\\": {
        \\"offset\\": 15,
        \\"line\\": 2,
        \\"column\\": 15
      }
    },
    \\"inner\\": [
      [
        {
          \\"id\\": \\"lights\\",
          \\"type\\": \\"Text\\"
        },
        {
          \\"id\\": \\"switch\\",
          \\"type\\": \\"Argument\\",
          \\"opt\\": false,
          \\"location\\": {
            \\"start\\": {
              \\"offset\\": 27,
              \\"line\\": 3,
              \\"column\\": 12
            },
            \\"end\\": {
              \\"offset\\": 36,
              \\"line\\": 3,
              \\"column\\": 21
            }
          }
        }
      ]
    ]
  },
  {
    \\"type\\": \\"ArgumentDefinition\\",
    \\"key\\": \\"switch\\",
    \\"location\\": {
      \\"start\\": {
        \\"offset\\": 38,
        \\"line\\": 5,
        \\"column\\": 1
      },
      \\"end\\": {
        \\"offset\\": 47,
        \\"line\\": 5,
        \\"column\\": 10
      }
    },
    \\"inner\\": [
      [
        {
          \\"id\\": \\"on\\",
          \\"type\\": \\"Alias\\",
          \\"opt\\": false
        }
      ],
      [
        {
          \\"id\\": \\"off\\",
          \\"type\\": \\"Alias\\",
          \\"opt\\": false
        }
      ]
    ]
  },
  {
    \\"type\\": \\"AliasDefinition\\",
    \\"key\\": \\"on\\",
    \\"inner\\": [
      [
        {
          \\"id\\": \\"on\\",
          \\"type\\": \\"Text\\"
        }
      ],
      [
        {
          \\"id\\": \\"active\\",
          \\"type\\": \\"Text\\"
        }
      ],
      [
        {
          \\"id\\": \\"activated\\",
          \\"type\\": \\"Text\\"
        }
      ],
      [
        {
          \\"id\\": \\"iluminated\\",
          \\"type\\": \\"Text\\"
        }
      ]
    ]
  },
  {
    \\"type\\": \\"AliasDefinition\\",
    \\"key\\": \\"off\\",
    \\"inner\\": [
      [
        {
          \\"id\\": \\"off\\",
          \\"type\\": \\"Text\\"
        }
      ],
      [
        {
          \\"id\\": \\"inactive\\",
          \\"type\\": \\"Text\\"
        }
      ],
      [
        {
          \\"id\\": \\"dark\\",
          \\"type\\": \\"Text\\"
        }
      ]
    ]
  }
]"
`;

exports[`test readme example 1`] = `
Array [
  Object {
    "entities": Array [
      Object {
        "end": 27,
        "entity": "switch",
        "start": 24,
        "value": "off",
      },
    ],
    "intent": "lightChange",
    "text": "Hey Bot turn the lights off",
  },
  Object {
    "entities": Array [
      Object {
        "end": 26,
        "entity": "switch",
        "start": 24,
        "value": "on",
      },
    ],
    "intent": "lightChange",
    "text": "Hey Bot turn the lights on",
  },
]
`;

exports[`test switch off example for argument with one value 1`] = `
"[
  {
    \\"text\\": \\"Hey Bot turn off the lights\\",
    \\"intent\\": \\"lightChange\\",
    \\"entities\\": [
      {
        \\"start\\": 8,
        \\"end\\": 16,
        \\"value\\": \\"off\\",
        \\"entity\\": \\"switch\\"
      }
    ]
  },
  {
    \\"text\\": \\"Hey Bot deactivate the lights\\",
    \\"intent\\": \\"lightChange\\",
    \\"entities\\": [
      {
        \\"start\\": 8,
        \\"end\\": 18,
        \\"value\\": \\"off\\",
        \\"entity\\": \\"switch\\"
      }
    ]
  }
]"
`;
