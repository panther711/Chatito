const utils = require("./utils");

/**
 * Transforms the chatito dataset from the intermediate representation to a rasa dataset. This are the arguments:
 * 
 * @param {Object[]} items - array of chatito intermediate representation examples. e.g.: [{ text: "lights on", intent: "lightChange", entities: [{"start": 7, "end": 9, "value": "on", "entity": "switch"}] }]
 * @param {Object} definitions - the entity definitions with their intermediate representation abstract syntax three
 * @param {Object} options - custom options for the rasa_nlu dataset settings. e.g.: { rasa_nlu_data: { regex_features : [{ name: "zipcode", pattern: "[0-9]{5}" }] }}
 * @returns {Object}
 */
function rasaDatasetAdapter(items, definitions, options) {
    const noop = () => {};
    noop(definitions); // rasa dont need the definitions obj, only snips for the custom entities functionality
    const dataset = { rasa_nlu_data: { regex_features : [], entity_synonyms: [], common_examples: [] } };
    if (options) { utils.mergeDeep(dataset, options); }
    dataset.rasa_nlu_data.common_examples = items.map(item => {
        let entities = [];
        if (item.arg) {
            entities = Object.keys(item.arg).map(k => {
                if (item.arg[k].value) {
                    const textValue = item.id.slice(item.arg[k].start, item.arg[k].end);
                    const argValue = item.arg[k].value;
                    if (textValue !== argValue) {
                        let synonymDefinitionFound = dataset.rasa_nlu_data.entity_synonyms.find(s => s.value === argValue);
                        if (!synonymDefinitionFound)  {
                            synonymDefinitionFound = { value: argValue, synonyms: [] };
                            dataset.rasa_nlu_data.entity_synonyms.push(synonymDefinitionFound);
                        }
                        const synonymForEntityFound = synonymDefinitionFound.synonyms.find(s => s === textValue);
                        if (!synonymForEntityFound) { synonymDefinitionFound.synonyms.push(textValue); }
                    }
                }
                return {
                    start: item.arg[k].start,
                    end: item.arg[k].end,
                    value: item.arg[k].value || item.id.slice(item.arg[k].start, item.arg[k].end),
                    entity: k,
                };
            });
        }
        return { text: item.id, intent: item.action, entities };
    });
    return dataset;
}

/**
 * Transforms the chatito dataset from the intermediate representation to a rasa dataset. This are the arguments:
 * 
 * @param {Object} dataset - The rasa format dataset generated by rasaDatasetAdapter
 * @param {Object} max - If there are more examples than this number, they will be testing examples
 * @param {Object} min - If there are less examples than this number, duplicates the data and no testing examples.
 * @returns {Object} - Returns an object with two properties (the two datasets): e.g.: { dataset: {} , testingExamples: [] }
 */
function rasaDatasetPostProcessor(dataset, max, min) {
    if (!dataset || !dataset.rasa_nlu_data || !dataset.rasa_nlu_data.common_examples) {
        throw new Error("Rasa post processor error: invalid dataset format");
    }
    if (max && min && min > max) {
        throw new Error("Min number of training examples can't be higher than max.");
    }
    utils.shuffle(dataset.rasa_nlu_data.common_examples);
    const allExamples = dataset.rasa_nlu_data.common_examples;
    let testingExamples = [];
    if (max && allExamples.length > max) {
        dataset.rasa_nlu_data.common_examples = allExamples.slice(0, max);
        testingExamples = allExamples.slice(max);
    } else if (min && allExamples.length < min) {
        while (dataset.rasa_nlu_data.common_examples.length < min) {
            dataset.rasa_nlu_data.common_examples = dataset.rasa_nlu_data.common_examples.concat(
                allExamples.slice(0, min - dataset.rasa_nlu_data.common_examples.length)
            );
        }
    }
    const stats = {
        total: allExamples.length,
        training: dataset.rasa_nlu_data.common_examples.length,
        testing: testingExamples.length
    };
    return { dataset, testingExamples, stats };
}

module.exports = {
    adapter: rasaDatasetAdapter,
    postProcessor: rasaDatasetPostProcessor,
};
